generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model OauthAccount {
  providerId     String
  providerUserId String
  userEmail      String
  userName       String
  userAvatarURL  String
  userId         String?   @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, providerUserId])
  @@map("oauth_account")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(cuid())
  token      String   @unique
  identifier String   // Email address
  expires    DateTime
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  @@unique([identifier, token])
  @@index([userId])
}

model User {
  id                 String               @id
  email              String?              @unique
  password           String?
  emailVerified      Boolean              @default(false)
  verificationCode   String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  oauthAccount       OauthAccount?
  session            Session[]
  verificationTokens VerificationToken[]
  profile            Profile?
  role               Role                 @default(ATTENDEE)
  // New relations for organizations
  ownedOrganizations Organization[]
  memberships        OrganizationMember[]
  sentInvites        OrganizationInvite[]
}

model Profile {
  id        String   @id @default(uuid())
  name      String
  imageUrl  String   @db.Text
  email     String   @db.Text
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Organization {
  id          String               @id @default(cuid())
  name        String
  description String
  website     String?
  logo        String?              @db.Text
  ownerId     String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  owner       User                 @relation(fields: [ownerId], references: [id])
  members     OrganizationMember[]
  invites     OrganizationInvite[]

  @@index([ownerId])
}

model OrganizationMember {
  id             String       @id @default(cuid())
  organizationId String
  userId         String
  role           MemberRole
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
}

model OrganizationInvite {
  id             String       @id @default(cuid())
  organizationId String
  email          String
  role           MemberRole
  token          String       @unique
  expiresAt      DateTime
  invitedById    String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invitedBy      User         @relation(fields: [invitedById], references: [id])

  @@index([organizationId])
  @@index([invitedById])
}

enum Role {
  ADMIN
  ORGANIZER
  ATTENDEE
}

enum MemberRole {
  ADMIN
  MEMBER
}